
import numpy as np
import math
import matplotlib.pyplot as plt
from filterpy.kalman.UKF import *
from filterpy.kalman.sigma_points import MerweScaledSigmaPoints

truth = np.array([[2.4747, 9.682], [2.4932, 9.682], [2.5236, 9.682], [2.5654, 9.682], [2.6184, 9.682],
                      [2.6822, 9.682], [2.7564, 9.682], [2.8406, 9.682], [2.9345, 9.682], [3.0377, 9.682],
                      [3.1499, 9.682], [3.2706, 9.682], [3.3996, 9.682], [3.5364, 9.682], [3.6807, 9.682],
                      [3.8322, 9.682], [3.9904, 9.682], [4.155, 9.682], [4.3256, 9.682], [4.5018, 9.682],
                      [4.6834, 9.682], [4.8699, 9.682], [5.061, 9.682], [5.2563, 9.682], [5.4554, 9.682],
                      [5.6579, 9.682], [5.8636, 9.682], [6.072, 9.682], [6.2828, 9.682], [6.4956, 9.682],
                      [6.7101, 9.682], [6.9258, 9.682], [7.1424, 9.682], [7.3596, 9.682], [7.577, 9.682],
                      [7.7942, 9.682], [8.0108, 9.682], [8.2265, 9.682], [8.441, 9.682], [8.6538, 9.682],
                      [8.8646, 9.682], [9.073, 9.682], [9.2787, 9.682], [9.4812, 9.682], [9.6803, 9.682],
                      [9.8756, 9.682], [10.067, 9.682], [10.253, 9.682], [10.435, 9.682], [10.611, 9.682],
                      [10.782, 9.682], [10.946, 9.682], [11.104, 9.682], [11.256, 9.682], [11.4, 9.682],
                      [11.537, 9.682], [11.666, 9.682], [11.787, 9.682], [11.899, 9.682], [12.002, 9.682],
                      [12.096, 9.682], [12.18, 9.682], [12.254, 9.682], [12.318, 9.682], [12.371, 9.682],
                      [12.413, 9.682], [12.443, 9.682], [12.462, 9.682], [12.468, 9.682], [12.468, 9.682],
                      [12.468, 9.682], [12.468, 9.682], [12.468, 9.682], [12.468, 9.682], [12.468, 9.682],
                      [12.468, 9.682], [12.468, 9.682], [12.468, 9.682], [12.468, 9.682], [12.468, 9.6968],
                      [12.468, 9.74], [12.468, 9.8103], [12.468, 9.906], [12.468, 10.026], [12.468, 10.168],
                      [12.468, 10.331], [12.468, 10.514], [12.468, 10.715], [12.468, 10.932], [12.468, 11.164],
                      [12.468, 11.41], [12.468, 11.668], [12.468, 11.936], [12.468, 12.213], [12.468, 12.498],
                      [12.468, 12.789], [12.468, 13.084], [12.468, 13.382], [12.468, 13.682], [12.468, 13.982],
                      [12.468, 14.28], [12.468, 14.575], [12.468, 14.866], [12.468, 15.151], [12.468, 15.428],
                      [12.468, 15.696], [12.468, 15.954], [12.468, 16.2], [12.468, 16.432], [12.468, 16.649],
                      [12.468, 16.85], [12.468, 17.033], [12.468, 17.196], [12.468, 17.338], [12.468, 17.458],
                      [12.468, 17.554], [12.468, 17.624], [12.468, 17.667], [12.468, 17.682], [12.468, 17.682],
                      [12.468, 17.682], [12.468, 17.682], [12.468, 17.682], [12.468, 17.682], [12.468, 17.682],
                      [12.468, 17.682], [12.468, 17.682], [12.468, 17.682], [12.468, 17.682], [12.478, 17.682],
                      [12.508, 17.682], [12.557, 17.682], [12.625, 17.682], [12.71, 17.682], [12.813, 17.682],
                      [12.933, 17.682], [13.069, 17.682], [13.221, 17.682], [13.388, 17.682], [13.57, 17.682],
                      [13.765, 17.682], [13.974, 17.682], [14.196, 17.682], [14.43, 17.682], [14.675, 17.682],
                      [14.932, 17.682], [15.199, 17.682], [15.475, 17.682], [15.762, 17.682], [16.056, 17.682],
                      [16.359, 17.682], [16.67, 17.682], [16.987, 17.682], [17.311, 17.682], [17.641, 17.682],
                      [16.976, 17.682], [18.316, 17.682], [18.659, 17.682], [19.007, 17.682], [19.357, 17.682],
                      [19.709, 17.682], [20.063, 17.682], [20.418, 17.682], [20.774, 17.682], [21.13, 17.682],
                      [21.485, 17.682], [21.84, 17.682], [22.192, 17.682], [22.542, 17.682], [22.889, 17.682],
                      [23.233, 17.682], [23.573, 17.682], [23.908, 17.682], [24.237, 17.682], [24.561, 17.682],
                      [24.879, 17.682], [25.189, 17.682], [25.492, 17.682], [25.787, 17.682], [26.073, 17.682],
                      [26.35, 17.682], [26.617, 17.682], [26.874, 17.682], [27.119, 17.682], [27.353, 17.682],
                      [27.574, 17.682], [27.783, 17.682], [27.979, 17.682], [28.16, 17.682], [28.327, 17.682],
                      [28.479, 17.682], [28.615, 17.682], [28.735, 17.682], [28.838, 17.682], [28.924, 17.682],
                      [28.992, 17.682], [29.041, 17.682], [29.07, 17.682], [29.08, 17.682], [29.08, 17.682],
                      [29.08, 17.682], [29.08, 17.682], [29.08, 17.682], [29.08, 17.682], [29.08, 17.682],
                      [29.08, 17.682], [29.08, 17.682], [29.08, 17.682], [29.08, 17.682], [29.08, 17.671],
                      [29.08, 17.637], [29.08, 17.581], [29.08, 17.504], [29.08, 17.407], [29.08, 17.29],
                      [29.08, 17.155], [29.08, 17.002], [29.08, 16.832], [29.08, 16.645], [29.08, 16.443],
                      [29.08, 16.226], [29.08, 15.995], [29.08, 15.751], [29.08, 15.495], [29.08, 15.226],
                      [29.08, 14.947], [29.08, 14.658], [29.08, 14.36], [29.08, 14.053], [29.08, 13.738],
                      [29.08, 13.416], [29.08, 13.088], [29.08, 12.574], [29.08, 12.416], [29.08, 12.074],
                      [29.08, 11.729], [29.08, 11.381], [29.08, 11.032], [29.08, 10.682], [29.08, 10.332],
                      [29.08, 9.98313], [29.08, 9.6356], [29.08, 9.2904], [29.08, 8.9483], [29.08, 8.6101],
                      [29.08, 8.2765], [29.08, 7.9484], [29.08, 7.6266], [29.08, 7.3117], [29.08, 7.0046],
                      [29.08, 6.706], [29.08, 6.4168], [29.08, 6.1377], [29.08, 5.8695], [29.08, 5.613],
                      [29.08, 5.3689], [29.08, 5.138], [29.08, 4.9211], [29.08, 4.7191], [29.08, 4.5325],
                      [29.08, 4.3623], [29.08, 4.2092], [29.08, 4.074], [29.08, 3.9575], [29.08, 3.8604],
                      [29.08, 3.7835], [29.08, 3.7276], [29.08, 3.6935], [29.08, 3.682], [29.08, 3.682],
                      [29.08, 3.682], [29.08, 3.682], [29.08, 3.682], [29.08, 3.682], [29.08, 3.682],
                      [29.08, 3.682], [29.08, 3.682], [29.08, 3.682], [29.08, 3.682], [29.037, 3.682],
                      [28.913, 3.682], [28.716, 3.682], [28.457, 3.682], [28.143, 3.682], [27.785, 3.682],
                      [27.39, 3.682], [26.969, 3.682], [26.529, 3.682], [26.081, 3.682], [25.632, 3.682],
                      [25.193, 3.682], [24.771, 3.682], [24.377, 3.682], [24.018, 3.682], [23.705, 3.682],
                      [23.445, 3.682], [23.249, 3.682], [23.124, 3.682], [23.081, 3.682]])


def getMeasurement():
    return np.array([[91.852,726.34], [93, 727], [96, 727], [97, 726], [100, 726], [103, 724], [108, 726], [112, 726],
                   [117, 726], [121, 726], [125, 725], [130, 725], [136, 726], [142, 727], [148, 726], [154, 726],
                   [159, 726], [167, 727], [174, 726], [180, 727], [187, 725], [196, 726], [202, 726], [210, 727],
                   [217, 725], [225, 726], [232, 727], [239, 726], [247, 725], [256, 726], [264, 726], [270, 726],
                   [279, 726], [287, 726], [294, 726], [302, 725], [311, 727], [318, 725], [324, 726], [333, 726],
                   [339, 726], [347, 726], [353, 726], [360, 726], [367, 727], [372, 726], [380, 726], [385, 726],
                   [392, 726], [398, 726], [402, 726], [408, 726], [412, 726], [417, 725], [422, 726], [426, 726],
                   [429, 726], [432, 727], [435, 727], [437, 725], [440, 726], [443, 726], [444, 726], [445, 726],
                   [446, 726], [446, 726], [446, 726], [446, 724], [445, 724], [447, 724], [446, 723], [446, 724],
                   [445, 724], [444, 724], [445, 724], [445, 724], [445, 723], [445, 722], [445, 719], [446, 716],
                   [446, 712], [445, 706], [446, 701], [446, 695], [445, 687], [446, 678], [445, 671], [445, 661],
                   [446, 653], [445, 642], [446, 634], [446, 622], [446, 612], [446, 600], [446, 591], [446, 578],
                   [445, 568], [446, 557], [446, 548], [446, 535], [446, 526], [446, 515], [446, 506], [446, 496],
                   [447, 486], [446, 479], [446, 471], [447, 463], [447, 457], [446, 451], [446, 445], [446, 442],
                   [447, 438], [447, 436], [447, 434], [447, 434], [446, 434], [445, 435], [446, 434], [447, 434],
                   [447, 435], [446, 435], [446, 434], [444, 432], [444, 432], [445, 431], [446, 430], [449, 431],
                   [450, 431], [452, 431], [457, 430], [460, 430], [465, 430], [469, 430], [475, 430], [480, 430],
                   [487, 430], [495, 431], [503, 431], [510, 431], [519, 431], [527, 431], [538, 431], [546, 431],
                   [553, 432], [561, 432], [572, 432], [585, 432], [594, 432], [604, 433], [618, 433], [630, 433],
                   [642, 433], [655, 433], [667, 433], [679, 433], [690, 433], [704, 434], [717, 433], [729, 433],
                   [742, 433], [755, 434], [768, 433], [781, 434], [794, 434], [806, 434], [819, 435], [831, 435],
                   [843, 435], [854, 435], [867, 434], [876, 438], [888, 436], [900, 437], [908, 438], [917, 438],
                   [928, 439], [938, 439], [949, 438], [958, 438], [967, 439], [976, 438], [984, 439], [992, 439],
                   [1000, 439], [1004, 432], [1013, 438], [1014, 434], [1021, 433], [1027, 439], [1031, 440], [1033, 440],
                   [1037, 439], [1039, 439], [1039, 439], [1040, 439], [1040, 439], [1038, 437], [1038, 437], [1039, 436],
                   [1041, 437], [1040, 438], [1041, 439], [1040, 439], [1039, 438], [1038, 439], [1038, 438], [1039, 440],
                   [1038, 441], [1039, 445], [1038, 449], [1039, 452], [1038, 473], [1039, 464], [1038, 479], [1038, 482],
                   [1038, 484], [1038, 491], [1038, 499], [1039, 506], [1037, 512], [1037, 522], [1037, 532], [1037, 544],
                   [1037, 555], [1037, 567], [1037, 575], [1037, 590], [1037, 602], [1038, 611], [1037, 625], [1037, 639],
                   [1038, 649], [1039, 664], [1039, 677], [1040, 688], [1040, 701], [1042, 714], [1037, 726], [1037, 739],
                   [1037, 751], [1037, 762], [1036, 775], [1037, 786], [1036, 798], [1041, 811], [1036, 823], [1036, 833],
                   [1035, 831], [1036, 852], [1037, 862], [1037, 872], [1036, 881], [1036, 889], [1037, 897], [1037, 904],
                   [1036, 910], [1037, 916], [1036, 922], [1036, 927], [1037, 931], [1036, 934], [1036, 936], [1036, 938],
                   [1036, 938], [1036, 938], [1036, 938], [1037, 937], [1035, 936], [1036, 937], [1037, 939], [1036, 941],
                   [1038, 940], [1039, 941], [1038, 940], [1038, 940], [1036, 940], [1032, 939], [1025, 939], [1015, 939],
                   [1006, 939], [989, 945], [974, 946], [958, 945], [942, 945], [926, 946], [906, 939], [896, 939], [884, 939],
                   [870, 940], [857, 940], [846, 940], [837, 940], [829, 940], [825, 940], [824, 940]])


z = getMeasurement()

xMeasured = []
yMeasured = []

n = len(z)
for meas in z:
    xMeasured.append(meas[0]*50/1788)
    yMeasured.append((1069 - meas[1]) * 30/1069)

def hx(x):
    H = np.array([[1, 0, 0, 0],
                  [0, 1, 0, 0]])
    return np.dot(H, x)

def fx(x, dt):
    F = np.array([[1, 0, dt, 0],
                  [0, 1, 0, dt],
                  [0, 0, dt, 0],
                  [0, 0, 0, dt]])
    return np.dot(F, x)

points = MerweScaledSigmaPoints(n=4, alpha=0.001, beta=2, kappa=0)
ukf = UnscentedKalmanFilter(dim_x=4, dim_z=2, dt=1/24, hx=hx, fx=fx, points=points)

ukf.x = [xMeasured[0], yMeasured[1], 0., 0.]
ukf.predict()
xFiltered = []
yFiltered = []
for x, y in zip(xMeasured, yMeasured):
    ukf.update(np.array([x,y]))
    xFiltered.append(ukf.x[0])
    yFiltered.append(ukf.x[1])
    ukf.predict()

xTrue, yTrue = [], []
for xy in truth:
    xTrue.append(xy[0])
    yTrue.append(xy[1])

xDiff, yDiff, Diff = [], [], []
for i in range(len(xMeasured)):
    xDiff.append((xMeasured[-i] - xTrue[-i]))
    yDiff.append((yMeasured[-i] - yTrue[-i]))
    Diff.append(math.sqrt((xTrue[-i] - xFiltered[-i])**2 + (yTrue[-i] - yFiltered[-i])**2))

plt.plot(xMeasured, yMeasured, label='Measurements')
plt.plot(xFiltered, yFiltered, 'red', label='Filtered')
plt.plot(xTrue, yTrue, 'black', label='True')
plt.legend()
"""plt.plot(range(len(xDiff)), xDiff)
print(np.mean(Diff))"""
plt.show()