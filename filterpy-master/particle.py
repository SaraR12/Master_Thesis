
import numpy as np
import math
import matplotlib.pyplot as plt
from filterpy.kalman.UKF import *
from filterpy.kalman.sigma_points import MerweScaledSigmaPoints
def getMeasurement():
    return np.array([[91.852,726.34], [93, 727], [96, 727], [97, 726], [100, 726], [103, 724], [108, 726], [112, 726],
                   [117, 726], [121, 726], [125, 725], [130, 725], [136, 726], [142, 727], [148, 726], [154, 726],
                   [159, 726], [167, 727], [174, 726], [180, 727], [187, 725], [196, 726], [202, 726], [210, 727],
                   [217, 725], [225, 726], [232, 727], [239, 726], [247, 725], [256, 726], [264, 726], [270, 726],
                   [279, 726], [287, 726], [294, 726], [302, 725], [311, 727], [318, 725], [324, 726], [333, 726],
                   [339, 726], [347, 726], [353, 726], [360, 726], [367, 727], [372, 726], [380, 726], [385, 726],
                   [392, 726], [398, 726], [402, 726], [408, 726], [412, 726], [417, 725], [422, 726], [426, 726],
                   [429, 726], [432, 727], [435, 727], [437, 725], [440, 726], [443, 726], [444, 726], [445, 726],
                   [446, 726], [446, 726], [446, 726], [446, 724], [445, 724], [447, 724], [446, 723], [446, 724],
                   [445, 724], [444, 724], [445, 724], [445, 724], [445, 723], [445, 722], [445, 719], [446, 716],
                   [446, 712], [445, 706], [446, 701], [446, 695], [445, 687], [446, 678], [445, 671], [445, 661],
                   [446, 653], [445, 642], [446, 634], [446, 622], [446, 612], [446, 600], [446, 591], [446, 578],
                   [445, 568], [446, 557], [446, 548], [446, 535], [446, 526], [446, 515], [446, 506], [446, 496],
                   [447, 486], [446, 479], [446, 471], [447, 463], [447, 457], [446, 451], [446, 445], [446, 442],
                   [447, 438], [447, 436], [447, 434], [447, 434], [446, 434], [445, 435], [446, 434], [447, 434],
                   [447, 435], [446, 435], [446, 434], [444, 432], [444, 432], [445, 431], [446, 430], [449, 431],
                   [450, 431], [452, 431], [457, 430], [460, 430], [465, 430], [469, 430], [475, 430], [480, 430],
                   [487, 430], [495, 431], [503, 431], [510, 431], [519, 431], [527, 431], [538, 431], [546, 431],
                   [553, 432], [561, 432], [572, 432], [585, 432], [594, 432], [604, 433], [618, 433], [630, 433],
                   [642, 433], [655, 433], [667, 433], [679, 433], [690, 433], [704, 434], [717, 433], [729, 433],
                   [742, 433], [755, 434], [768, 433], [781, 434], [794, 434], [806, 434], [819, 435], [831, 435],
                   [843, 435], [854, 435], [867, 434], [876, 438], [888, 436], [900, 437], [908, 438], [917, 438],
                   [928, 439], [938, 439], [949, 438], [958, 438], [967, 439], [976, 438], [984, 439], [992, 439],
                   [1000, 439], [1004, 432], [1013, 438], [1014, 434], [1021, 433], [1027, 439], [1031, 440], [1033, 440],
                   [1037, 439], [1039, 439], [1039, 439], [1040, 439], [1040, 439], [1038, 437], [1038, 437], [1039, 436],
                   [1041, 437], [1040, 438], [1041, 439], [1040, 439], [1039, 438], [1038, 439], [1038, 438], [1039, 440],
                   [1038, 441], [1039, 445], [1038, 449], [1039, 452], [1038, 473], [1039, 464], [1038, 479], [1038, 482],
                   [1038, 484], [1038, 491], [1038, 499], [1039, 506], [1037, 512], [1037, 522], [1037, 532], [1037, 544],
                   [1037, 555], [1037, 567], [1037, 575], [1037, 590], [1037, 602], [1038, 611], [1037, 625], [1037, 639],
                   [1038, 649], [1039, 664], [1039, 677], [1040, 688], [1040, 701], [1042, 714], [1037, 726], [1037, 739],
                   [1037, 751], [1037, 762], [1036, 775], [1037, 786], [1036, 798], [1041, 811], [1036, 823], [1036, 833],
                   [1035, 831], [1036, 852], [1037, 862], [1037, 872], [1036, 881], [1036, 889], [1037, 897], [1037, 904],
                   [1036, 910], [1037, 916], [1036, 922], [1036, 927], [1037, 931], [1036, 934], [1036, 936], [1036, 938],
                   [1036, 938], [1036, 938], [1036, 938], [1037, 937], [1035, 936], [1036, 937], [1037, 939], [1036, 941],
                   [1038, 940], [1039, 941], [1038, 940], [1038, 940], [1036, 940], [1032, 939], [1025, 939], [1015, 939],
                   [1006, 939], [989, 945], [974, 946], [958, 945], [942, 945], [926, 946], [906, 939], [896, 939], [884, 939],
                   [870, 940], [857, 940], [846, 940], [837, 940], [829, 940], [825, 940], [824, 940]])
xs = [np.linspace(88,446,78).tolist(), np.linspace(446,446,50).tolist(), np.linspace(446,1039,80).tolist(), np.linspace(1039,1039,70), np.linspace(1039, 825,20)]
ys = [np.linspace(724,724,78).tolist(), np.linspace(724, 446, 50).tolist(), np.linspace(439,439,80).tolist(), np.linspace(439, 938, 70), np.linspace(938, 938, 20)]

xTrue = []
yTrue = []
for xValues, yValues in zip(xs, ys):
    for x,y in zip(xValues, yValues):
        xTrue.append(x*50/1788)
        yTrue.append((1069 - y)*30/1069)

z = getMeasurement()

xMeasured = []
yMeasured = []

n = len(z)
for meas in z:
    xMeasured.append(meas[0]*50/1788)
    yMeasured.append((1069 - meas[1]) * 30/1069)

def hx(x):
    H = np.array([[1, 0, 0, 0],
                  [0, 1, 0, 0]])
    return np.dot(H, x)

def fx(x, dt):
    F = np.array([[1, 0, dt, 0],
                  [0, 1, 0, dt],
                  [0, 0, dt, 0],
                  [0, 0, 0, dt]])
    return np.dot(F, x)

points = MerweScaledSigmaPoints(n=4, alpha=0.001, beta=2, kappa=0)
ukf = UnscentedKalmanFilter(dim_x=4, dim_z=2, dt=1/24, hx=hx, fx=fx, points=points)

ukf.x = [xMeasured[0], yMeasured[1], 0., 0.]
ukf.predict()
xFiltered = []
yFiltered = []
for x, y in zip(xMeasured, yMeasured):
    ukf.update(np.array([x,y]))
    xFiltered.append(ukf.x[0])
    yFiltered.append(ukf.x[1])
    ukf.predict()

plt.plot(xMeasured, yMeasured, label='Measurements')
plt.plot(xFiltered, yFiltered, 'red', label='Filtered')
plt.plot(xTrue, yTrue, 'black', label='True')
plt.legend()
plt.show()