from filterpy.kalman.UKF import *
from filterpy.kalman.sigma_points import MerweScaledSigmaPoints
import matplotlib.pyplot as plt
import numpy as np

def getMeasurement():
    return np.array([[91.852,726.34], [93, 727], [96, 727], [97, 726], [100, 726], [103, 724], [108, 726], [112, 726],
                   [117, 726], [121, 726], [125, 725], [130, 725], [136, 726], [142, 727], [148, 726], [154, 726],
                   [159, 726], [167, 727], [174, 726], [180, 727], [187, 725], [196, 726], [202, 726], [210, 727],
                   [217, 725], [225, 726], [232, 727], [239, 726], [247, 725], [256, 726], [264, 726], [270, 726],
                   [279, 726], [287, 726], [294, 726], [302, 725], [311, 727], [318, 725], [324, 726], [333, 726],
                   [339, 726], [347, 726], [353, 726], [360, 726], [367, 727], [372, 726], [380, 726], [385, 726],
                   [392, 726], [398, 726], [402, 726], [408, 726], [412, 726], [417, 725], [422, 726], [426, 726],
                   [429, 726], [432, 727], [435, 727], [437, 725], [440, 726], [443, 726], [444, 726], [445, 726],
                   [446, 726], [446, 726], [446, 726], [446, 724], [445, 724], [447, 724], [446, 723], [446, 724],
                   [445, 724], [444, 724], [445, 724], [445, 724], [445, 723], [445, 722], [445, 719], [446, 716],
                   [446, 712], [445, 706], [446, 701], [446, 695], [445, 687], [446, 678], [445, 671], [445, 661],
                   [446, 653], [445, 642], [446, 634], [446, 622], [446, 612], [446, 600], [446, 591], [446, 578],
                   [445, 568], [446, 557], [446, 548], [446, 535], [446, 526], [446, 515], [446, 506], [446, 496],
                   [447, 486], [446, 479], [446, 471], [447, 463], [447, 457], [446, 451], [446, 445], [446, 442],
                   [447, 438], [447, 436], [447, 434], [447, 434], [446, 434], [445, 435], [446, 434], [447, 434],
                   [447, 435], [446, 435], [446, 434], [444, 432], [444, 432], [445, 431], [446, 430], [449, 431],
                   [450, 431], [452, 431], [457, 430], [460, 430], [465, 430], [469, 430], [475, 430], [480, 430],
                   [487, 430], [495, 431], [503, 431], [510, 431], [519, 431], [527, 431], [538, 431], [546, 431],
                   [553, 432], [561, 432], [572, 432], [585, 432], [594, 432], [604, 433], [618, 433], [630, 433],
                   [642, 433], [655, 433], [667, 433], [679, 433], [690, 433], [704, 434], [717, 433], [729, 433],
                   [742, 433], [755, 434], [768, 433], [781, 434], [794, 434], [806, 434], [819, 435], [831, 435],
                   [843, 435], [854, 435], [867, 434], [876, 438], [888, 436], [900, 437], [908, 438], [917, 438],
                   [928, 439], [938, 439], [949, 438], [958, 438], [967, 439], [976, 438], [984, 439], [992, 439],
                   [1000, 439], [1004, 432], [1013, 438], [1014, 434], [1021, 433], [1027, 439], [1031, 440], [1033, 440],
                   [1037, 439], [1039, 439], [1039, 439], [1040, 439], [1040, 439], [1038, 437], [1038, 437], [1039, 436],
                   [1041, 437], [1040, 438], [1041, 439], [1040, 439], [1039, 438], [1038, 439], [1038, 438], [1039, 440],
                   [1038, 441], [1039, 445], [1038, 449], [1039, 452], [1038, 473], [1039, 464], [1038, 479], [1038, 482],
                   [1038, 484], [1038, 491], [1038, 499], [1039, 506], [1037, 512], [1037, 522], [1037, 532], [1037, 544],
                   [1037, 555], [1037, 567], [1037, 575], [1037, 590], [1037, 602], [1038, 611], [1037, 625], [1037, 639],
                   [1038, 649], [1039, 664], [1039, 677], [1040, 688], [1040, 701], [1042, 714], [1037, 726], [1037, 739],
                   [1037, 751], [1037, 762], [1036, 775], [1037, 786], [1036, 798], [1041, 811], [1036, 823], [1036, 833],
                   [1035, 831], [1036, 852], [1037, 862], [1037, 872], [1036, 881], [1036, 889], [1037, 897], [1037, 904],
                   [1036, 910], [1037, 916], [1036, 922], [1036, 927], [1037, 931], [1036, 934], [1036, 936], [1036, 938],
                   [1036, 938], [1036, 938], [1036, 938], [1037, 937], [1035, 936], [1036, 937], [1037, 939], [1036, 941],
                   [1038, 940], [1039, 941], [1038, 940], [1038, 940], [1036, 940], [1032, 939], [1025, 939], [1015, 939],
                   [1006, 939], [989, 945], [974, 946], [958, 945], [942, 945], [926, 946], [906, 939], [896, 939], [884, 939],
                   [870, 940], [857, 940], [846, 940], [837, 940], [829, 940], [825, 940], [824, 940]])
zs = getMeasurement()

zf = np.array([[93, 727], [95, 727], [96, 726], [99, 726], [102, 725], [106, 726], [110, 726], [114, 726], [119, 726],
               [123, 726], [127, 725], [133, 726], [138, 726], [144, 726], [150, 726], [156, 726], [163, 726], [170, 726],
               [176, 727], [183, 726], [191, 726], [198, 726], [205, 727], [212, 726], [220, 726], [228, 726], [235, 726],
               [242, 726], [251, 726], [259, 726], [266, 726], [274, 726], [282, 726], [290, 726], [297, 726], [306, 726],
               [313, 726], [320, 726], [328, 726], [335, 726], [342, 726], [349, 726], [356, 726], [363, 726], [369, 726],
               [376, 726], [382, 726], [388, 726], [394, 726], [399, 726], [404, 726], [409, 726], [414, 726], [419, 726],
               [423, 726], [427, 726], [430, 726], [433, 727], [435, 726], [439, 726], [441, 726], [443, 726], [445, 726],
               [445, 726], [446, 726], [446, 726], [446, 725], [445, 724], [446, 724], [446, 724], [446, 724], [445, 724],
               [445, 724], [445, 724], [445, 724], [445, 723], [445, 722], [446, 720], [446, 717], [446, 714], [445, 709],
               [446, 704], [446, 698], [445, 691], [446, 683], [445, 676], [446, 667], [446, 658], [446, 648], [446, 639],
               [446, 629], [446, 618], [446, 607], [446, 597], [446, 585], [446, 575], [446, 563], [446, 554], [446, 542],
               [446, 532], [446, 522], [446, 512], [446, 502], [446, 492], [446, 484], [446, 476], [447, 468], [447, 461],
               [446, 455], [447, 449], [447, 444], [447, 440], [447, 437], [447, 435], [447, 434], [447, 434], [445, 434],
               [446, 434], [446, 434], [447, 434], [447, 435], [446, 434], [445, 433], [445, 432], [445, 431], [446, 431],
               [448, 431], [449, 431], [451, 431], [455, 430], [458, 430], [463, 430], [467, 430], [472, 430], [477, 430],
               [483, 430], [491, 430], [499, 431], [506, 431], [514, 431], [522, 431], [532, 431], [541, 431], [549, 432],
               [557, 432], [566, 432], [578, 432], [588, 432], [598, 433], [610, 433], [623, 433], [635, 433], [647, 433],
               [660, 433], [672, 433], [683, 433], [697, 433], [710, 433], [722, 433], [734, 433], [747, 433], [760, 433],
               [773, 434], [786, 434], [799, 434], [811, 434], [824, 434], [836, 434], [847, 434], [860, 434], [870, 436],
               [882, 436], [893, 436], [902, 437], [912, 438], [922, 438], [933, 438], [943, 438], [952, 438], [962, 438],
               [971, 438], [979, 438], [987, 438], [995, 438], [1001, 435], [1009, 437], [1013, 435], [1018, 434], [1024, 437],
               [1028, 439], [1032, 439], [1035, 439], [1038, 439], [1039, 439], [1040, 439], [1040, 439], [1039, 438],
               [1039, 438], [1039, 437], [1040, 437], [1041, 437], [1041, 438], [1041, 439], [1040, 438], [1039, 438],
               [1039, 438], [1039, 439], [1039, 440], [1039, 443], [1039, 447], [1039, 450], [1039, 464], [1039, 464],
               [1039, 473], [1039, 478], [1039, 482], [1038, 487], [1039, 495], [1039, 502], [1038, 508], [1037, 516],
               [1038, 526], [1038, 537], [1038, 548], [1037, 559], [1037, 569], [1037, 582], [1037, 594], [1038, 605],
               [1038, 617], [1038, 631], [1038, 642], [1039, 656], [1039, 669], [1040, 681], [1040, 693], [1042, 706],
               [1039, 719], [1038, 731], [1037, 744], [1037, 755], [1037, 768], [1037, 779], [1037, 791], [1040, 803],
               [1038, 815], [1037, 826], [1036, 829], [1036, 844], [1037, 855], [1037, 865], [1037, 875], [1037, 884],
               [1037, 892], [1037, 899], [1037, 906], [1037, 912], [1037, 919], [1037, 924], [1037, 929], [1037, 932],
               [1036, 935], [1037, 937], [1037, 938], [1037, 938], [1037, 939], [1037, 938], [1036, 937], [1036, 937],
               [1037, 939], [1037, 940], [1038, 940], [1038, 941], [1039, 940], [1038, 940], [1037, 940], [1034, 940],
               [1029, 939], [1020, 939], [1012, 939], [998, 943], [983, 945], [968, 945], [952, 945], [936, 946],
               [917, 942], [905, 940], [892, 940], [879, 940], [866, 940], [854, 940], [844, 940], [835, 940],
               [829, 940], [826, 940]])

zs2 = np.array([[91.852,726.34], [93, 727], [96, 727], [97, 726], [100, 726], [103, 724], [108, 726], [112, 726], [117, 726], [121, 726], [125, 725], [130, 725], [136, 726], [142, 727], [148, 726], [154, 726], [159, 726], [167, 727], [174, 726], [180, 727], [187, 725], [196, 726], [202, 726], [210, 727], [217, 725], [225, 726], [232, 727], [239, 726], [247, 725], [256, 726], [264, 726], [270, 726], [279, 726], [287, 726], [294, 726], [302, 725], [311, 727], [318, 725], [324, 726], [333, 726], [339, 726], [347, 726], [353, 726], [360, 726], [367, 727], [372, 726], [380, 726], [385, 726], [392, 726], [398, 726], [402, 726], [408, 726], [412, 726], [417, 725], [422, 726], [426, 726], [429, 726], [432, 727], [435, 727], [437, 725], [440, 726], [443, 726], [444, 726], [445, 726], [446, 726], [446, 726], [446, 726], [446, 724], [445, 724], [447, 724], [446, 723], [446, 724], [445, 724], [444, 724], [445, 724], [445, 724], [445, 723], [445, 722], [445, 719], [446, 716], [446, 712], [445, 706], [446, 701], [446, 695], [445, 687], [446, 678], [445, 671], [445, 661], [446, 653], [445, 642], [446, 634], [446, 622], [446, 612], [446, 600], [446, 591], [446, 578], [445, 568], [446, 557], [446, 548], [446, 535], [446, 526], [446, 515], [446, 506], [446, 496], [447, 486], [446, 479], [446, 471], [447, 463], [447, 457], [446, 451], [446, 445], [446, 442], [447, 438], [447, 436], [447, 434], [447, 434], [446, 434], [445, 435], [446, 434], [447, 434], [447, 435], [446, 435], [446, 434], [444, 432], [444, 432], [445, 431], [446, 430], [449, 431], [450, 431], [452, 431], [457, 430], [460, 430], [465, 430], [469, 430], [475, 430], [480, 430], [487, 430], [495, 431], [503, 431], [510, 431], [519, 431], [527, 431], [538, 431], [546, 431], [553, 432], [561, 432], [572, 432], [585, 432], [594, 432], [604, 433], [618, 433], [630, 433], [642, 433], [655, 433], [667, 433], [679, 433], [690, 433], [704, 434], [717, 433], [729, 433], [742, 433], [755, 434], [768, 433], [781, 434], [794, 434], [806, 434], [819, 435], [831, 435], [843, 435], [854, 435], [867, 434], [876, 438], [888, 436], [900, 437], [908, 438], [917, 438], [928, 439], [938, 439], [949, 438], [958, 438], [967, 439], [976, 438], [984, 439], [992, 439], [1000, 439], [1004, 432], [1013, 438], [1014, 434], [1021, 433], [1027, 439], [1031, 440], [1033, 440], [1037, 439], [1039, 439], [1039, 439], [1040, 439], [1040, 439], [1038, 437], [1038, 437], [1039, 436], [1041, 437], [1040, 438], [1041, 439], [1040, 439], [1039, 438], [1038, 439], [1038, 438], [1039, 440], [1038, 441], [1039, 445], [1038, 449], [1039, 452], [1038, 473], [1039, 464], [1038, 479], [1038, 482], [1038, 484], [1038, 491], [1038, 499], [1039, 506], [1037, 512], [1037, 522], [1037, 532], [1037, 544], [1037, 555], [1037, 567], [1037, 575], [1037, 590], [1037, 602], [1038, 611], [1037, 625], [1037, 639], [1038, 649], [1039, 664], [1039, 677], [1040, 688], [1040, 701], [1042, 714], [1037, 726], [1037, 739], [1037, 751], [1037, 762], [1036, 775], [1037, 786], [1036, 798], [1041, 811], [1036, 823], [1036, 833], [1035, 831], [1036, 852], [1037, 862], [1037, 872], [1036, 881], [1036, 889], [1037, 897], [1037, 904], [1036, 910], [1037, 916], [1036, 922], [1036, 927], [1037, 931], [1036, 934], [1036, 936], [1036, 938], [1036, 938], [1036, 938], [1036, 938], [1037, 937], [1035, 936], [1036, 937], [1037, 939], [1036, 941], [1038, 940], [1039, 941], [1038, 940], [1038, 940], [1036, 940], [1032, 939], [1025, 939], [1015, 939], [1006, 939], [989, 945], [974, 946], [958, 945], [942, 945], [926, 946], [906, 939], [896, 939], [884, 939], [870, 940], [857, 940], [846, 940], [837, 940], [829, 940], [825, 940], [824, 940]])
zf2 = np.array([[93, 727], [95, 727], [96, 726], [99, 726], [102, 725], [106, 726], [110, 726], [114, 726], [119, 726], [123, 726], [128, 725], [133, 726], [139, 726], [145, 726], [151, 726], [156, 726], [163, 726], [171, 726], [177, 727], [184, 726], [191, 726], [198, 726], [206, 727], [213, 726], [221, 726], [228, 726], [236, 726], [243, 726], [252, 726], [260, 726], [267, 726], [275, 726], [283, 726], [291, 726], [298, 726], [307, 726], [315, 726], [321, 726], [329, 726], [336, 726], [344, 726], [350, 726], [357, 726], [364, 726], [370, 726], [377, 726], [383, 726], [389, 726], [395, 726], [400, 726], [406, 726], [411, 726], [416, 726], [420, 726], [425, 726], [428, 726], [431, 726], [435, 727], [437, 726], [440, 726], [443, 726], [445, 726], [446, 726], [447, 726], [448, 726], [448, 726], [447, 725], [447, 724], [448, 724], [448, 724], [448, 724], [447, 724], [446, 724], [446, 724], [447, 724], [447, 723], [447, 722], [447, 720], [447, 717], [447, 714], [447, 709], [447, 704], [447, 698], [447, 691], [447, 683], [447, 676], [447, 666], [447, 658], [447, 648], [447, 639], [447, 628], [447, 618], [447, 606], [447, 596], [447, 585], [447, 574], [447, 563], [447, 553], [447, 541], [447, 531], [447, 520], [447, 511], [447, 501], [447, 491], [447, 483], [447, 474], [448, 466], [448, 460], [447, 453], [447, 448], [447, 443], [448, 439], [448, 436], [448, 434], [448, 433], [447, 433], [446, 433], [447, 433], [447, 433], [447, 433], [447, 434], [447, 433], [446, 431], [445, 431], [446, 430], [447, 429], [449, 430], [450, 430], [452, 429], [456, 429], [459, 429], [463, 429], [467, 429], [472, 428], [478, 429], [484, 429], [491, 429], [499, 429], [507, 430], [515, 430], [524, 430], [533, 430], [542, 430], [550, 431], [558, 431], [567, 431], [579, 431], [590, 431], [599, 432], [612, 432], [624, 432], [637, 432], [649, 432], [661, 432], [673, 432], [685, 432], [698, 432], [711, 432], [724, 432], [736, 432], [749, 432], [762, 432], [775, 433], [788, 433], [801, 433], [814, 434], [826, 434], [838, 434], [850, 434], [862, 434], [873, 436], [884, 435], [896, 436], [905, 436], [914, 437], [925, 438], [935, 438], [945, 437], [955, 437], [964, 437], [974, 437], [982, 438], [990, 438], [998, 438], [1004, 434], [1011, 436], [1015, 434], [1021, 433], [1026, 436], [1031, 438], [1034, 439], [1038, 439], [1040, 438], [1041, 438], [1043, 438], [1043, 438], [1042, 437], [1042, 437], [1042, 436], [1043, 436], [1043, 437], [1044, 438], [1043, 438], [1042, 438], [1042, 438], [1041, 438], [1041, 439], [1041, 440], [1042, 443], [1041, 446], [1041, 450], [1041, 464], [1041, 464], [1041, 473], [1041, 478], [1041, 481], [1040, 487], [1041, 495], [1041, 502], [1040, 508], [1039, 516], [1040, 526], [1040, 537], [1039, 548], [1039, 560], [1039, 570], [1039, 583], [1039, 595], [1040, 605], [1040, 618], [1040, 631], [1040, 643], [1041, 656], [1041, 670], [1042, 682], [1042, 694], [1043, 707], [1040, 720], [1039, 732], [1039, 745], [1039, 756], [1038, 769], [1039, 781], [1038, 792], [1041, 805], [1039, 817], [1038, 828], [1037, 831], [1038, 845], [1038, 857], [1038, 867], [1038, 877], [1038, 885], [1038, 894], [1038, 901], [1038, 908], [1038, 914], [1038, 920], [1038, 926], [1038, 930], [1038, 934], [1038, 937], [1038, 939], [1038, 940], [1038, 940], [1038, 940], [1038, 940], [1037, 939], [1037, 939], [1038, 940], [1038, 942], [1039, 942], [1039, 943], [1039, 942], [1039, 942], [1038, 942], [1035, 941], [1030, 941], [1021, 941], [1012, 941], [999, 944], [984, 946], [969, 947], [952, 947], [936, 947], [918, 943], [905, 941], [892, 941], [879, 941], [866, 941], [854, 942], [843, 941], [834, 942], [829, 941], [826, 942]])



def hx(x, dt=1/24):
    F = np.array([[1, 0, 0, 0],
                  [0, 1, 0, 0],
                  [1, 0., dt, 0],
                  [0, 1, 0, dt]])
    return np.dot(F, x)

def fx(x):
    return np.array([[x[0][0], 0, 0, 0], [0, x[1][0], 0, 0]])

sigmapoints = MerweScaledSigmaPoints(n=4, alpha=1e3, beta=2, kappa=0.)

ukf = UnscentedKalmanFilter(dim_x=4,dim_z=2, dt=1/24, hx=hx, fx=fx, points=sigmapoints)
ukf.x = [92, 726]

for z in zs:
    print(z)
    ukf.update(z, hx, fx)
    print(ukf.x)


xz, xz2 = [], []
yz, yz2 = [], []

center = [23.081, 3.682]

scale_x = 1788 / 50
scale_y = 1069 / 30

centerX = round(scale_x * center[0], 3)
centerY = round((30 - center[1]) * scale_y, 3)


xu, xu2 = [], []
yu, yu2 = [], []
for z, u in zip(zs, zf):
    xz.append(z[0])
    yz.append(-z[1])

    xu.append(u[0])
    yu.append(-u[1])

for z2, u2 in zip(zs2, zf2):
    xz2.append(z2[0])
    yz2.append(-z2[1])

    xu2.append(u2[0])
    yu2.append(-u2[1])

xs = [np.linspace(88,446,78).tolist(), np.linspace(446,446,50).tolist(), np.linspace(446,1039,80).tolist(), np.linspace(1039,1039,70), np.linspace(1039, 825,20)]
ys = [np.linspace(724,724,78).tolist(), np.linspace(724, 446, 50).tolist(), np.linspace(439,439,80).tolist(), np.linspace(439, 938, 70), np.linspace(938, 938, 20)]

xtrue, ytrue = [], []
xdiff, ydiff = [], []
for x, y in zip(xs, ys):
    for (i, xvalue), yvalue in zip(enumerate(x),y):
        xtrue.append(xvalue)
        ytrue.append(-yvalue)
        [29.08, 3.682]
        xdiff.append((xtrue - xu[i])[0])
        ydiff.append((ytrue - yu[i])[0])

plt.plot(xz, yz, linewidth=2 ,label='Measurement')
plt.plot(xu, yu, color='red', label='Filtered trajectory')
plt.plot(xtrue, ytrue, color='black', label='True trajectory')
plt.legend()

plt.show()

