from filterpy.kalman.EKF import *
import matplotlib.pyplot as plt


zs = np.array([[91.852, 726.34], [93, 727], [96, 727], [97, 726], [100, 726], [103, 724], [108, 726], [112, 726], [117, 726], [121, 726], [125, 725], [130, 725], [136, 726], [142, 727], [148, 726], [154, 726], [159, 726], [167, 727], [174, 726], [180, 727], [187, 725], [196, 726], [202, 726], [210, 727], [217, 725], [225, 726], [232, 727], [239, 726], [247, 725], [256, 726], [264, 726], [270, 726], [279, 726], [287, 726], [294, 726], [302, 725], [311, 727], [318, 725], [324, 726], [333, 726], [339, 726], [347, 726], [353, 726], [360, 726], [367, 727], [372, 726], [380, 726], [385, 726], [392, 726], [398, 726], [402, 726], [408, 726], [412, 726], [417, 725], [422, 726], [426, 726], [429, 726], [432, 727], [435, 727], [437, 725], [440, 726], [443, 726], [444, 726], [445, 726], [446, 726], [446, 726], [446, 726], [446, 724], [445, 724], [447, 724], [446, 723], [446, 724], [445, 724], [444, 724], [445, 724], [445, 724], [445, 723], [445, 722], [445, 719], [446, 716], [446, 712], [445, 706], [446, 701], [446, 695], [445, 687], [446, 678], [445, 671], [445, 661], [446, 653], [445, 642], [446, 634], [446, 622], [446, 612], [446, 600], [446, 591], [446, 578], [445, 568], [446, 557], [446, 548], [446, 535], [446, 526], [446, 515], [446, 506], [446, 496], [447, 486], [446, 479], [446, 471], [447, 463], [447, 457], [446, 451], [446, 445], [446, 442], [447, 438], [447, 436], [447, 434], [447, 434], [446, 434], [445, 435], [446, 434], [447, 434], [447, 435], [446, 435], [446, 434], [444, 432], [444, 432], [445, 431], [446, 430], [449, 431], [450, 431], [452, 431], [457, 430], [460, 430], [465, 430], [469, 430], [475, 430], [480, 430], [487, 430], [495, 431], [503, 431], [510, 431], [519, 431], [527, 431], [538, 431], [546, 431], [553, 432], [561, 432], [572, 432], [585, 432], [594, 432], [604, 433], [618, 433], [630, 433], [642, 433], [655, 433], [667, 433], [679, 433], [690, 433], [704, 434], [717, 433], [729, 433], [742, 433]])
zf = np.array([[93, 727], [95, 727], [96, 726], [99, 726], [102, 725], [106, 726], [110, 726], [114, 726], [119, 726], [123, 726], [127, 725], [133, 726], [138, 726], [144, 726], [150, 726], [156, 726], [163, 726], [170, 726], [176, 727], [183, 726], [191, 726], [198, 726], [205, 727], [212, 726], [220, 726], [228, 726], [235, 726], [242, 726], [251, 726], [259, 726], [266, 726], [274, 726], [282, 726], [290, 726], [297, 726], [306, 726], [313, 726], [320, 726], [328, 726], [335, 726], [342, 726], [349, 726], [356, 726], [363, 726], [369, 726], [376, 726], [382, 726], [388, 726], [394, 726], [399, 726], [404, 726], [409, 726], [414, 726], [419, 726], [423, 726], [427, 726], [430, 726], [433, 727], [435, 726], [439, 726], [441, 726], [443, 726], [445, 726], [445, 726], [446, 726], [446, 726], [446, 725], [445, 724], [446, 724], [446, 724], [446, 724], [445, 724], [445, 724], [445, 724], [445, 724], [445, 723], [445, 722], [446, 720], [446, 717], [446, 714], [445, 709], [446, 704], [446, 698], [445, 691], [446, 683], [445, 676], [446, 667], [446, 658], [446, 648], [446, 639], [446, 629], [446, 618], [446, 607], [446, 597], [446, 585], [446, 575], [446, 563], [446, 554], [446, 542], [446, 532], [446, 522], [446, 512], [446, 502], [446, 492], [446, 484], [446, 476], [447, 468], [447, 461], [446, 455], [447, 449], [447, 444], [447, 440], [447, 437], [447, 435], [447, 434], [447, 434], [445, 434], [446, 434], [446, 434], [447, 434], [447, 435], [446, 434], [445, 433], [445, 432], [445, 431], [446, 431], [448, 431], [449, 431], [451, 431], [455, 430], [458, 430], [463, 430], [467, 430], [472, 430], [477, 430], [483, 430], [491, 430], [499, 431], [506, 431], [514, 431], [522, 431], [532, 431], [541, 431], [549, 432], [557, 432], [566, 432], [578, 432], [588, 432], [598, 433], [610, 433], [623, 433], [635, 433], [647, 433], [660, 433], [672, 433], [683, 433], [697, 433], [710, 433], [722, 433], [734, 433]])
"""ekf = ExtendedKalmanFilter(4,2)
def fx(x, dt=1/24):
    F = np.array([[1., 0, dt, 0],
                  [0, 1., 0, dt],
                  [0, 0, 1., 0],
                  [0, 0, 0, 1.]])
    return np.dot(F, x)

def hx(x):
    return np.array([[x[0][0], 0, 0, 0], [0, x[1][0], 0, 0]])


for z in zs:
    print(z)
    ekf.predict_update(z, hx, fx)"""
xz = []
yz = []

center = [19.709, 17.6822]

scale_x = 1788 / 50
scale_y = 1069 / 30

centerX = round(scale_x * center[0], 3)
centerY = round((30 - center[1]) * scale_y, 3)


xu = []
yu = []
for z, u in zip(zs, zf):
    xz.append(z[0])
    yz.append(-z[1])

    xu.append(u[0])
    yu.append(-u[1])

xs = [np.linspace(88,446,78).tolist(), np.linspace(446,446,50).tolist(), np.linspace(446,705,32).tolist()]
ys = [np.linspace(724,724,78).tolist(), np.linspace(724, 446, 50).tolist(), np.linspace(439,439,32).tolist()]

xtrue, ytrue = [], []

for x, y in zip(xs, ys):
    for xvalue, yvalue in zip(x,y):
        xtrue.append(xvalue)
        ytrue.append(-yvalue)

plt.plot(xz, yz, linewidth=2 ,label='Measurement')
plt.plot(xu, yu, color='red', label='Filtered trajectory')
plt.plot(xtrue, ytrue, color='black', label='True trajectory')
plt.legend()
plt.title('Tracker Output')

plt.show()